generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User { 
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        Role
  image       String?
  createdAt   DateTime @default(now())
  isNewUser   Boolean?

  managerId    String?
  departmentId String?
  teamId       String?

  department  Department? @relation("UserDepartment", fields: [departmentId], references: [id])
  team        Team?       @relation("UserTeam", fields: [teamId], references: [id])

  manager     User?    @relation("ManagerRelation", fields: [managerId], references: [id])
  users       User[]   @relation("ManagerRelation")

  diretorDepartments Department[] @relation("DepartmentDirector")
  leaderTeam Team[] @relation("TeamLeader")

  UserOnTrail UserOnTrail[]
}

model Trail{
  id            String   @id @default(uuid())
  title         String   
  description   String
  duration      Int
  isActive      Boolean
  createdAt     DateTime @default(now())
  assignedUsers Int
  
  departmentId  String?
  teamId        String?

  department    Department? @relation(fields: [departmentId], references: [id])
  team          Team?       @relation(fields: [teamId], references: [id])

  step          Step[]
  userOnTrail   UserOnTrail[]
}

model Step{
  id          String   @id @default(uuid())
  title       String  
  description String?
  duration    Int
  order       Int 
  isRequired  Boolean
  type        StepType

  trailId     String
  trail       Trail    @relation(fields: [trailId], references: [id])

  content     Content? 
}

model Content{
  id          String   @id @default(uuid())
  videoUrl    String?
  description String?
  question    Question[]
  documentUrl String?

  stepId      String   @unique
  step        Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)

}

model Question{
  id            String  @id @default(uuid())
  questionTitle String
  type          TypeQuestion
  options       String[]
  correctAswer  Int

  contentId     String
  content       Content @relation(fields: [contentId], references:[id])
}

model Department{
  id        String @id @default(uuid())
  name      String @unique
  color     String
  userCount Int?

  teams     Team[]
  users     User[] @relation("UserDepartment")
  trails    Trail[]

  diretorId String?
  diretor User? @relation("DepartmentDirector", fields: [diretorId], references: [id])
}

model Team{
  id            String @id @default(uuid())
  name          String @unique
  memberCount   Int?
  color         String

  departmentId  String
  department    Department @relation(fields: [departmentId], references: [id])

  users         User[] @relation("UserTeam")
  trails        Trail[]

  learderId String?
  leader User? @relation("TeamLeader", fields: [learderId], references: [id])
}


//tabelas relacionais
model UserOnTrail{
  id      String  @id @default(uuid())
  userId  String
  trailId String
  
  user   User    @relation(fields: [userId], references: [id])
  trail  Trail   @relation(fields: [trailId], references: [id])

  assignedAt DateTime @default(now())

  @@unique([userId, trailId])
}

//Enumeradore
enum StepType{
  video
  question
  book
}

enum TypeQuestion{
  multiple
}




enum Role {
  Jovem_Aprendiz
  Estagio
  Assistente
  Analista_Junior
  Analista_Pleno
  Analista_Senior
  Analista_Dados
  DevOps
  Scrum_Master
  Desenvolvedor_Junior
  Desenvolvedor_Pleno
  Desenvolvedor_Senior
  QA_Junior
  QA_Pleno
  QA_Senior
  Especialista
  Coordenador
  Tech_Lead
  Gerente
  Gerente_Senior
  Executivo
  Diretor
  Vice_Presidente
  CEO
}
