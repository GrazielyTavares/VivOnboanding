
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  image: 'image',
  createdAt: 'createdAt',
  isNewUser: 'isNewUser',
  managerId: 'managerId',
  departmentId: 'departmentId',
  teamId: 'teamId'
};

exports.Prisma.TrailScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  duration: 'duration',
  isActive: 'isActive',
  createdAt: 'createdAt',
  assignedUsers: 'assignedUsers',
  departmentId: 'departmentId',
  teamId: 'teamId'
};

exports.Prisma.StepScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  duration: 'duration',
  order: 'order',
  isRequired: 'isRequired',
  type: 'type',
  trailId: 'trailId'
};

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  videoUrl: 'videoUrl',
  description: 'description',
  documentUrl: 'documentUrl',
  stepId: 'stepId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionTitle: 'questionTitle',
  type: 'type',
  options: 'options',
  correctAswer: 'correctAswer',
  contentId: 'contentId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  userCount: 'userCount',
  diretorId: 'diretorId'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  memberCount: 'memberCount',
  color: 'color',
  departmentId: 'departmentId',
  learderId: 'learderId'
};

exports.Prisma.UserOnTrailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  trailId: 'trailId',
  assignedAt: 'assignedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  Jovem_Aprendiz: 'Jovem_Aprendiz',
  Estagio: 'Estagio',
  Assistente: 'Assistente',
  Analista_Junior: 'Analista_Junior',
  Analista_Pleno: 'Analista_Pleno',
  Analista_Senior: 'Analista_Senior',
  Analista_Dados: 'Analista_Dados',
  DevOps: 'DevOps',
  Scrum_Master: 'Scrum_Master',
  Desenvolvedor_Junior: 'Desenvolvedor_Junior',
  Desenvolvedor_Pleno: 'Desenvolvedor_Pleno',
  Desenvolvedor_Senior: 'Desenvolvedor_Senior',
  QA_Junior: 'QA_Junior',
  QA_Pleno: 'QA_Pleno',
  QA_Senior: 'QA_Senior',
  Especialista: 'Especialista',
  Coordenador: 'Coordenador',
  Tech_Lead: 'Tech_Lead',
  Gerente: 'Gerente',
  Gerente_Senior: 'Gerente_Senior',
  Executivo: 'Executivo',
  Diretor: 'Diretor',
  Vice_Presidente: 'Vice_Presidente',
  CEO: 'CEO'
};

exports.StepType = exports.$Enums.StepType = {
  video: 'video',
  question: 'question',
  book: 'book'
};

exports.TypeQuestion = exports.$Enums.TypeQuestion = {
  multiple: 'multiple'
};

exports.Prisma.ModelName = {
  User: 'User',
  Trail: 'Trail',
  Step: 'Step',
  Content: 'Content',
  Question: 'Question',
  Department: 'Department',
  Team: 'Team',
  UserOnTrail: 'UserOnTrail'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
